@model ProgressTracker.Models.ViewModels.TasksViewModel;
@{
    ViewData["Title"] = "ProgressTracker";
}

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/tracker.css"/>
</head>
<body>
    <div class="row">
        <div class="col-md-3">
            <div class="task-container-fluid">
                @if (!(Model.SmallTasks.Count() >= 2))
                {
                    <div class="small-task">
                        @await Html.PartialAsync("_NoTaskPartial", "small")
                    </div>
                }
                else
                {
                    @foreach (var task in Model.SmallTasks.Take(2))
                    {
                        <div class="small-task">
                            @await Html.PartialAsync("_SmallTaskPartial", task)
                        </div>
                    }
                }
            </div>
        </div>

        <div class="col-md-6">
            <div class="task-container-fluid">
                @if (!(Model.MediumTasks.Count() >= 1))
                {
                    <div class="medium-task">
                        @await Html.PartialAsync("_NoTaskPartial", "medium")
                    </div>
                }
                else
                {
                    @foreach (var task in Model.MediumTasks.Take(1))
                    {
                        <div class="medium-task">
                            @await Html.PartialAsync("_MediumTaskPartial", task)
                        </div>
                    }
                }
                @if (Model.LargeTask == null || Model.LargeTask.Name == null)
                {
                    <div class="large-task">
                        @await Html.PartialAsync("_NoTaskPartial", "large")
                    </div>
                }
                else
                {
                    <div class="large-task">
                        @await Html.PartialAsync("_LargeTaskPartial", Model.LargeTask)
                    </div>
                }
                @if (!(Model.MediumTasks.Count() >= 2))
                {
                    <div class="medium-task">
                        @await Html.PartialAsync("_NoTaskPartial", "medium")
                    </div>
                }
                else
                {
                    @foreach (var task in Model.MediumTasks.Skip(1))
                    {
                        <div class="medium-task">
                            @await Html.PartialAsync("_MediumTaskPartial", task)
                        </div>
                    }
                }
            </div>
        </div>

        <div class="col-md-3">
            <div class="task-container-fluid">
                @if (Model.SmallTasks.Count() == 4) 
                {
                    @foreach (var task in Model.SmallTasks.Skip(2))
                    {
                        <div class="small-task">
                            @await Html.PartialAsync("_SmallTaskPartial", task)
                        </div>
                    }
                }
                @if (Model.SmallTasks.Count() == 3)
                {
                    @foreach (var task in Model.SmallTasks.Skip(2))
                    {
                        <div class="small-task">
                            @await Html.PartialAsync("_SmallTaskPartial", task)
                        </div>
                    }

                    <div class="small-task">
                        @await Html.PartialAsync("_NoTaskPartial", "small")
                    </div>
                }
                else if (Model.SmallTasks.Count() == 2)
                {
                    <div class="small-task">
                        @await Html.PartialAsync("_NoTaskPartial", "small")
                    </div>
                    <div class="small-task">
                        @await Html.PartialAsync("_NoTaskPartial", "small")
                    </div>
                }
            </div>
        </div>       
    </div>
</body>
