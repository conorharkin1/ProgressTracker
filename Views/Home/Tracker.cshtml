@model ProgressTracker.Models.ViewModels.TasksViewModel
@{
    ViewData["Title"] = "ProgressTracker";
    var smallTasks = Model.SmallTasks.ToList();
    var mediumTasks = Model.MediumTasks.ToList();
}

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/tracker.css" />
</head>

<body>
    <div class="row">
        <div class="col-md-3">
            <div class="task-container-fluid">
                @{
                    var leftSmallTasks = smallTasks.Take(2).ToList();
                    int leftPlaceholders = 2 - leftSmallTasks.Count;

                    foreach (var task in leftSmallTasks)
                    {
                        <div class="small-task">
                            @await Html.PartialAsync("_SmallTaskPartial", task)
                        </div>
                    }

                    for (int i = 0; i < leftPlaceholders; i++)
                    {
                        <div class="small-task">
                            @await Html.PartialAsync("_NoTaskPartial", "small")
                        </div>
                    }
                }
            </div>
        </div>
        <div class="col-md-6">
            <div class="task-container-fluid">
                @if (mediumTasks.Count > 0)
                {
                    <div class="medium-task">
                        @await Html.PartialAsync("_MediumTaskPartial", mediumTasks[0])
                    </div>
                }
                else
                {
                    <div class="medium-task">
                        @await Html.PartialAsync("_NoTaskPartial", "medium")
                    </div>
                }
                @if (Model.LargeTask == null || string.IsNullOrEmpty(Model.LargeTask.Name))
                {
                    <div class="large-task">
                        @await Html.PartialAsync("_NoTaskPartial", "large")
                    </div>
                }
                else
                {
                    <div class="large-task">
                        @await Html.PartialAsync("_LargeTaskPartial", Model.LargeTask)
                    </div>
                }
                @if (mediumTasks.Count > 1)
                {
                    foreach (var task in mediumTasks.Skip(1))
                    {
                        <div class="medium-task">
                            @await Html.PartialAsync("_MediumTaskPartial", task)
                        </div>
                    }
                }
                else
                {
                    <div class="medium-task">
                        @await Html.PartialAsync("_NoTaskPartial", "medium")
                    </div>
                }
            </div>
        </div>
        <div class="col-md-3">
            <div class="task-container-fluid">
                @{
                    var rightSmallTasks = smallTasks.Skip(2).ToList();
                    int rightPlaceholders = 2 - rightSmallTasks.Count;

                    foreach (var task in rightSmallTasks)
                    {
                        <div class="small-task">
                            @await Html.PartialAsync("_SmallTaskPartial", task)
                        </div>
                    }

                    for (int i = 0; i < rightPlaceholders; i++)
                    {
                        <div class="small-task">
                            @await Html.PartialAsync("_NoTaskPartial", "small")
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</body>

@section Scripts {
    <script src="~/js/add-task.js"></script>
    <script src="~/js/manage-task.js"></script>
}
